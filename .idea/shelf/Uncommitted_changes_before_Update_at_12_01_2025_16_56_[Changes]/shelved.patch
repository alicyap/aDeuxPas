Index: aDeuxPas/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for aDeuxPas project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aDeuxPas/urls.py b/aDeuxPas/urls.py
--- a/aDeuxPas/urls.py	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/aDeuxPas/urls.py	(date 1736551984702)
@@ -17,6 +17,12 @@
 from django.contrib import admin
 from django.urls import path
 
+from ADP import views
+
 urlpatterns = [
     path('admin/', admin.site.urls),
+    #path('', include('ADP.urls')), # URL pour accéder à ta page HTML
+    path('map/', views.map_view, name='map'),
+    path('line/<int:line_id>/', views.get_line_data, name='line_data'),
+    path('get-lines/', views.get_lines, name='get_lines'),
 ]
Index: ADP/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nclass Bibliotheques(models.Model):\r\n    nom = models.TextField(db_column='Nom', blank=True, null=True)\r\n    rue = models.TextField(db_column='Rue', blank=True, null=True)\r\n    commune = models.TextField(db_column='Commune', blank=True, null=True)\r\n    cp = models.IntegerField(db_column='CP', blank=True, null=True)\r\n    coordonnees_geo = models.TextField(db_column='Coordonnees geo', blank=True, null=True)\r\n    services_proposes = models.TextField(db_column='Services proposes', blank=True, null=True)\r\n    type_d_etablissement = models.TextField(db_column='Type d etablissement', blank=True, null=True)\r\n    heures_d_ouverture = models.TextField(db_column='Heures d ouverture', blank=True, null=True)\r\n    fermeture_annuelle = models.TextField(db_column='Fermeture annuelle', blank=True, null=True)\r\n    conditions_d_acces = models.TextField(db_column='Conditions d acces', blank=True, null=True)\r\n    site_web = models.TextField(db_column='Site web', blank=True, null=True)\r\n    telephone = models.TextField(db_column='Telephone', blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return f\"{self.nom} \\n {self.rue}  {self.commune}  {self.cp} \\n {self.heures_d_ouverture}\\n {self.services_proposes} \"\r\n\r\n    class Meta:\r\n        managed = False\r\n        db_table = 'bibliotheques'\r\n\r\n\r\nclass Coworking(models.Model):\r\n    nom = models.TextField(db_column='NOM', blank=True, null=True)\r\n    adresse = models.TextField(db_column='ADRESSE', blank=True, null=True)\r\n    cp = models.IntegerField(db_column='CP', blank=True, null=True)\r\n    ville = models.TextField(db_column='VILLE', blank=True, null=True)\r\n    web = models.TextField(db_column='WEB', blank=True, null=True)\r\n    coordonnees = models.TextField(db_column='COORDONNEES', blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return f\"{self.nom} \\n {self.adresse}  {self.cp} \\n {self.web} \"\r\n\r\n    class Meta:\r\n        managed = False\r\n        db_table = 'coworking'\r\n\r\n\r\nclass Metro(models.Model):\r\n    id_line = models.IntegerField(db_column='ID Line', blank=True, null=True)\r\n    libelle_line = models.IntegerField(db_column='Libelle Line', blank=True, null=True)\r\n    libelle_station = models.TextField(db_column='Libelle station', blank=True, null=True)\r\n    point_geo = models.TextField(db_column='Point GEO', blank=True, null=True)\r\n    finish = models.IntegerField(blank=True, null=True)\r\n    commune_nom = models.TextField(db_column='Commune nom', blank=True, null=True)\r\n    commune_code_insee = models.IntegerField(db_column='Commune code Insee', blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.libelle_station\r\n    class Meta:\r\n        managed = False\r\n        db_table = 'metro'\r\n\r\n\r\nclass Parcs(models.Model):\r\n    typologie_d_espace_vert = models.TextField(db_column=\"Typologie d'espace vert\", blank=True, null=True)\r\n    identifiant_espace_vert = models.IntegerField(db_column='Identifiant espace vert', blank=True, null=True)\r\n    nom_de_lespace_vert = models.TextField(db_column='Nom de lespace vert', blank=True, null=True)\r\n    categorie = models.TextField(db_column='Categorie', blank=True, null=True)\r\n    adresse = models.TextField(db_column='Adresse', blank=True, null=True)\r\n    code_postal = models.IntegerField(db_column='Code postal', blank=True, null=True)\r\n    ouverture_24h_24h = models.TextField(db_column='Ouverture 24h_24h', blank=True, null=True)\r\n    geo_point = models.TextField(db_column='Geo point', blank=True, null=True)\r\n    presence_cloture = models.TextField(db_column='Presence cloture', blank=True, null=True)\r\n\r\n    class Meta:\r\n        managed = False\r\n        db_table = 'parcs'\r\n\r\n    def __str__(self):\r\n        return f\"{self.nom_de_lespace_vert} \\n {self.adresse}  {self.code_postal} \"\r\n\r\nclass Resto(models.Model):\r\n    nom = models.TextField(db_column='Nom', blank=True, null=True)\r\n    type = models.TextField(db_column='Type', blank=True, null=True)\r\n    cuisine = models.TextField(db_column='Cuisine', blank=True, null=True)\r\n    vegetarien = models.TextField(db_column='Vegetarien', blank=True, null=True)\r\n    vegane = models.TextField(db_column='Vegane', blank=True, null=True)\r\n    heures_ouverture = models.TextField(db_column='Heures_ouverture', blank=True, null=True)\r\n    acces_handicapes = models.TextField(db_column='Acces_Handicapes', blank=True, null=True)\r\n    telephone = models.TextField(db_column='Telephone', blank=True, null=True)\r\n    site_web = models.TextField(db_column='Site_Web', blank=True, null=True)\r\n    commune = models.TextField(db_column='Commune', blank=True, null=True)\r\n    code_commune = models.IntegerField(db_column='Code_Commune', blank=True, null=True)\r\n    departement = models.TextField(db_column='Departement', blank=True, null=True)\r\n    osm_point = models.TextField(db_column='OSM_Point', blank=True, null=True)\r\n    osm_url = models.TextField(db_column='OSM_URL', blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return f\"{self.nom} \\n {self.type}  {self.cuisine} \\n {self.heures_ouverture}\\n {self.site_web} \\n {self.telephone} \"\r\n    class Meta:\r\n        managed = False\r\n        db_table = 'resto'\r\n\r\nclass StationLieu(models.Model):\r\n    station = models.ForeignKey('Metro', on_delete=models.CASCADE, related_name='lieux_proches')\r\n    lieu_type = models.CharField(max_length=50)  # Type de lieu : resto, biblio, parc, coworking\r\n    lieu_id = models.IntegerField()  # ID du lieu dans sa table respective\r\n\r\n    class Meta:\r\n        unique_together = ('station', 'lieu_type', 'lieu_id')\r\n        db_table = 'station_lieu'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ADP/models.py b/ADP/models.py
--- a/ADP/models.py	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/ADP/models.py	(date 1736554077646)
@@ -1,5 +1,6 @@
 from django.db import models
 class Bibliotheques(models.Model):
+    id = models.AutoField(primary_key=True)
     nom = models.TextField(db_column='Nom', blank=True, null=True)
     rue = models.TextField(db_column='Rue', blank=True, null=True)
     commune = models.TextField(db_column='Commune', blank=True, null=True)
@@ -22,12 +23,13 @@
 
 
 class Coworking(models.Model):
+    id = models.AutoField(primary_key=True)
     nom = models.TextField(db_column='NOM', blank=True, null=True)
     adresse = models.TextField(db_column='ADRESSE', blank=True, null=True)
     cp = models.IntegerField(db_column='CP', blank=True, null=True)
     ville = models.TextField(db_column='VILLE', blank=True, null=True)
     web = models.TextField(db_column='WEB', blank=True, null=True)
-    coordonnees = models.TextField(db_column='COORDONNEES', blank=True, null=True)
+    coordonnees_geo = models.TextField(db_column='COORDONNEES', blank=True, null=True)
 
     def __str__(self):
         return f"{self.nom} \n {self.adresse}  {self.cp} \n {self.web} "
@@ -38,6 +40,7 @@
 
 
 class Metro(models.Model):
+    id = models.AutoField(primary_key=True)
     id_line = models.IntegerField(db_column='ID Line', blank=True, null=True)
     libelle_line = models.IntegerField(db_column='Libelle Line', blank=True, null=True)
     libelle_station = models.TextField(db_column='Libelle station', blank=True, null=True)
@@ -55,13 +58,13 @@
 
 class Parcs(models.Model):
     typologie_d_espace_vert = models.TextField(db_column="Typologie d'espace vert", blank=True, null=True)
-    identifiant_espace_vert = models.IntegerField(db_column='Identifiant espace vert', blank=True, null=True)
-    nom_de_lespace_vert = models.TextField(db_column='Nom de lespace vert', blank=True, null=True)
+    identifiant_espace_vert = models.IntegerField(db_column='Identifiant espace vert', primary_key=True)
+    nom = models.TextField(db_column='Nom de lespace vert', blank=True, null=True)
     categorie = models.TextField(db_column='Categorie', blank=True, null=True)
     adresse = models.TextField(db_column='Adresse', blank=True, null=True)
     code_postal = models.IntegerField(db_column='Code postal', blank=True, null=True)
     ouverture_24h_24h = models.TextField(db_column='Ouverture 24h_24h', blank=True, null=True)
-    geo_point = models.TextField(db_column='Geo point', blank=True, null=True)
+    coordonnees_geo = models.TextField(db_column='Geo point', blank=True, null=True)
     presence_cloture = models.TextField(db_column='Presence cloture', blank=True, null=True)
 
     class Meta:
@@ -69,9 +72,10 @@
         db_table = 'parcs'
 
     def __str__(self):
-        return f"{self.nom_de_lespace_vert} \n {self.adresse}  {self.code_postal} "
+        return f"{self.nom} \n {self.adresse}  {self.code_postal} "
 
 class Resto(models.Model):
+    id = models.AutoField(primary_key=True)
     nom = models.TextField(db_column='Nom', blank=True, null=True)
     type = models.TextField(db_column='Type', blank=True, null=True)
     cuisine = models.TextField(db_column='Cuisine', blank=True, null=True)
@@ -84,7 +88,7 @@
     commune = models.TextField(db_column='Commune', blank=True, null=True)
     code_commune = models.IntegerField(db_column='Code_Commune', blank=True, null=True)
     departement = models.TextField(db_column='Departement', blank=True, null=True)
-    osm_point = models.TextField(db_column='OSM_Point', blank=True, null=True)
+    coordonnees_geo = models.TextField(db_column='OSM_Point', blank=True, null=True)
     osm_url = models.TextField(db_column='OSM_URL', blank=True, null=True)
 
     def __str__(self):
@@ -93,11 +97,11 @@
         managed = False
         db_table = 'resto'
 
-class StationLieu(models.Model):
-    station = models.ForeignKey('Metro', on_delete=models.CASCADE, related_name='lieux_proches')
-    lieu_type = models.CharField(max_length=50)  # Type de lieu : resto, biblio, parc, coworking
-    lieu_id = models.IntegerField()  # ID du lieu dans sa table respective
+#class StationLieu(models.Model):
+ #   station = models.ForeignKey('Metro', on_delete=models.CASCADE, related_name='lieux_proches')
+  #  lieu_type = models.CharField(max_length=50)  # Type de lieu : resto, biblio, parc, coworking
+   # lieu_id = models.IntegerField()  # ID du lieu dans sa table respective
 
-    class Meta:
-        unique_together = ('station', 'lieu_type', 'lieu_id')
-        db_table = 'station_lieu'
+    #class Meta:
+     #   unique_together = ('station', 'lieu_type', 'lieu_id')
+        #db_table = 'station_lieu'
Index: ADP/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\n\r\n# Create your views here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ADP/views.py b/ADP/views.py
--- a/ADP/views.py	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/ADP/views.py	(date 1736552194331)
@@ -1,3 +1,63 @@
 from django.shortcuts import render
 
-# Create your views here.
+from django.http import JsonResponse
+from .models import Metro, Bibliotheques, Coworking, Parcs, Resto
+from geopy.distance import geodesic
+
+from .utils import parse_coordinates
+
+def get_lines(request):
+    # Récupère les numéros de ligne distincts
+    lines = Metro.objects.values_list('libelle_line', flat=True).distinct()
+    # Tri dans l'ordre croissant
+    lines = sorted(filter(None, lines))  # Retire les valeurs nulles ou None
+    return JsonResponse({"lines": [f"Ligne {line}" for line in lines]})
+
+def get_line_data(request, line_id):
+    stations = Metro.objects.filter(libelle_line=line_id)
+    lieux_data = {
+        "bibliotheques": Bibliotheques.objects.all(),
+        "coworking": Coworking.objects.all(),
+        "parcs": Parcs.objects.all(),
+        "restos": Resto.objects.all(),
+    }
+
+    result = {"stations": [], "lieux": []}
+
+    for station in stations:
+        lat, lon = parse_coordinates(station.point_geo)
+        if lat is None or lon is None:
+            continue
+
+        result["stations"].append({
+            "name": station.libelle_station,
+            "latitude": lat,
+            "longitude": lon,
+        })
+
+        for lieu_type, lieux_queryset in lieux_data.items():
+            for lieu in lieux_queryset:
+                lieu_lat, lieu_lon = parse_coordinates(
+                    getattr(lieu, 'coordonnees_geo', None)
+                )
+                if lieu_lat is None or lieu_lon is None:
+                    continue
+
+                distance = geodesic((lat, lon), (lieu_lat, lieu_lon)).km
+                status = "proche" if distance <= 1 else "lointain"
+
+                result["lieux"].append({
+                    "type": lieu_type,
+                    "name": lieu.nom,
+                    "latitude": lieu_lat,
+                    "longitude": lieu_lon,
+                    "status": status,
+                })
+
+    return JsonResponse(result)
+
+
+from django.shortcuts import render
+
+def map_view(request):
+    return render(request, 'map.html')  # Le chemin relatif vers ton fichier HTML
Index: .idea/aDeuxPas.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$/../example\" />\r\n        <option name=\"settingsModule\" value=\"example/settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/../example/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/../example\\templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/aDeuxPas.iml b/.idea/aDeuxPas.iml
--- a/.idea/aDeuxPas.iml	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/.idea/aDeuxPas.iml	(date 1736529799480)
@@ -16,8 +16,9 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.12 (pythonProject1)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="leaflet" level="application" />
   </component>
   <component name="TemplatesService">
     <option name="TEMPLATE_CONFIGURATION" value="Django" />
Index: .idea/jsLibraryMappings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jsLibraryMappings.xml b/.idea/jsLibraryMappings.xml
new file mode 100644
--- /dev/null	(date 1736529799585)
+++ b/.idea/jsLibraryMappings.xml	(date 1736529799585)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaScriptLibraryMappings">
+    <file url="file://$PROJECT_DIR$" libraries="{leaflet}" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12 (example)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/.idea/misc.xml	(date 1734088991740)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12 (example)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (pythonProject1)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: aDeuxPas/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for aDeuxPas project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.1.3.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\nfrom .secrets import BDD_MDP\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-kbs4vci(i0rt-#6k5h50_5_lvl42k3=_rd^*f=(v0u=dm09q9w'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'aDeuxPas'\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'aDeuxPas.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates']\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'aDeuxPas.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.mysql',\r\n        'NAME': 'alicyapearl_bdds5',\r\n        'USER' : '390464',\r\n        'PASSWORD' : BDD_MDP,\r\n        'HOST' : 'mysql-alicyapearl.alwaysdata.net',\r\n        'PORT' : '3306',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aDeuxPas/settings.py b/aDeuxPas/settings.py
--- a/aDeuxPas/settings.py	(revision 1c64bf2a16e2f501098372ddc8930db24addcae8)
+++ b/aDeuxPas/settings.py	(date 1736535489921)
@@ -11,6 +11,7 @@
 """
 
 from pathlib import Path
+
 from .secrets import BDD_MDP
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
@@ -38,7 +39,8 @@
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
-    'aDeuxPas'
+    'aDeuxPas',
+    'ADP'
 ]
 
 MIDDLEWARE = [
@@ -56,7 +58,7 @@
 TEMPLATES = [
     {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [BASE_DIR / 'templates']
+        'DIRS': [BASE_DIR / 'ADP' / 'templates']
         ,
         'APP_DIRS': True,
         'OPTIONS': {
@@ -124,6 +126,10 @@
 
 STATIC_URL = 'static/'
 
+STATICFILES_DIRS = [
+    BASE_DIR / "ADP/static",
+]
+
 # Default primary key field type
 # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
 
